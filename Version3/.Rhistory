t()
})
#Import the human latent space data
listHumanLatentSpace <- map(filesMLP_Human,
function(x){
suppressMessages(read_csv(x)) %>%
column_to_rownames("Region") %>%
as.matrix() %>%
t()
})
#Compute the latent space similarity matrices
listSimLatentSpace <- map2(listHumanLatentSpace, listMouseLatentSpace,
function(x1, x2){
m <- buildSimilarityMatrix(x1 = x1, x2 = x2)
m <- m[,match(listLabelsMouseReordered$Region67_reordered, colnames(m))]
m <- m[match(listLabelsHumanReordered$Region88_reordered, rownames(m)),]
})
names(listSimLatentSpace) <- str_c("MLP_v", 1:length(listSimLatentSpace))
rm(listMouseLatentSpace, listHumanLatentSpace)
#' Compute scaled similarity profiles for every column in a similarity matrix
#'
#' @param similarity A similarity matrix
#' @param scale A logical value indicating whether to scale the similarity profiles
#'
#' @return A tibble containing the scaled similarity profiles
computeSimilarityProfiles <- function(similarity, scale = FALSE){
profiles <- tibble()
for(seed in colnames(similarity)){
temp <- similarity[, seed] %>%
enframe(name = "Target",
value = "Similarity")
if(scale){
temp <- temp %>%
mutate(Similarity = (Similarity - min(Similarity))/(max(Similarity) - min(Similarity)))
}
temp <- temp %>%
mutate(TargetRank = as.numeric(factor(Target, levels = Target[order(Similarity, decreasing = TRUE)])),
Seed = seed)
profiles <- bind_rows(profiles, temp)
}
return(profiles)
}
#Include the original homologous gene similarity matrix
listSimMats <- c(list("AllGenes" = matSim_H88M67_AllGenes),
listSimLatentSpace)
rm(listSimLatentSpace)
#Create data frame with similarity profiles
dfSimilarityProfiles <- map_df(.x = listSimMats,
.f = computeSimilarityProfiles,
.id = "Data",
scale = TRUE)
#Import the data frame containing mouse-human canonical pairs
dfCanonicalPairs_H88M67 <- suppressMessages(read_csv(str_c(pathHome, "Data/", "MouseHumanMatches_H88M67.csv")))
#Extract the ranks for canonical pairs in all data sets
dfCanonicalPairs_H88M67_Ranks <- dfSimilarityProfiles %>%
inner_join(dfCanonicalPairs_H88M67,
by = c("Seed" = "Mouse")) %>%
filter(Target == Human) %>%
mutate(Seed = fct_rev(factor(Seed, levels = listLabelsMouseReordered$Region67_reordered))) %>%
select(Data, Seed, Target, Similarity, TargetRank)
#Convert data frame to wide format to compute rank differences
dfCanonicalPairs_H88M67_RankDiffs <- dfCanonicalPairs_H88M67_Ranks %>%
select(Data, Seed, TargetRank) %>%
spread(key = "Data", value = "TargetRank")
#Compute rank differences and convert back to long format
dfCanonicalPairs_H88M67_RankDiffs <- dfCanonicalPairs_H88M67_RankDiffs %>%
select(contains("MLP")) %>%
map_dfc(function(x){x - dfCanonicalPairs_H88M67_RankDiffs$AllGenes}) %>%
mutate(Seed = dfCanonicalPairs_H88M67_RankDiffs$Seed) %>%
gather(key = "Data", value = "RankDiff", -Seed) %>%
mutate(Seed = fct_rev(factor(Seed, levels = listLabelsMouseReordered$Region67_reordered)))
#Prune mouse tree to 11 regions for cluster annotations
treeMouse_11 <- Clone(treeMouse)
pruneAnatTree(treeMouse_11,
nodes = listLabelsMouseReordered$Region11,
method = "BelowNode")
#Prune human tree to 16 regions for cluster annotations
treeHuman_16 <- Clone(treeHuman)
pruneAnatTree(treeHuman_16,
nodes = listLabelsHumanReordered$Region16,
method = "BelowNode")
#Get colour annotation from trees
coloursMouse <-  treeMouse_11$Get("color_hex_triplet", filterFun = isLeaf)
indOrderMouseColours <- match(listLabelsMouseReordered$Region11_reordered, names(coloursMouse))
coloursMouse <- coloursMouse[indOrderMouseColours]
coloursHuman <- treeHuman_16$Get("color_hex_triplet", filterFun = isLeaf)
indOrderHumanColours <- match(listLabelsHumanReordered$Region16_reordered, names(coloursHuman))
coloursHuman <- coloursHuman[indOrderHumanColours]
annotation_colours <- list(MouseRegion = coloursMouse,
HumanRegion = coloursHuman)
#Create a set of modified colours for clearer visualization.
#To be used for text colouring mostly
annotation_colours_mod <- annotation_colours
annotation_colours_mod$MouseRegion["Isocortex"] <- "#68EC68"
annotation_colours_mod$MouseRegion["Cerebellar cortex"] <- "#E6E67B"
annotation_colours_mod$MouseRegion["Cerebellar nuclei"] <- "#E6E67B"
annotation_colours_mod$HumanRegion["insula"] <- "#E6E658"
annotation_colours_mod$HumanRegion["diencephalon"] <- "#85DD63"
annotation_colours_mod$HumanRegion["pons"] <- "#00E0A4"
dfCanonicalPairs_H88M67_Ranks <- dfCanonicalPairs_H88M67_Ranks %>%
mutate(Data2 = ifelse(Data == "AllGenes", "AllGenes", "MLP"),
Data2 = factor(Data2, levels = c("MLP", "AllGenes")))
dfCanonicalPairs_H88M67_Ranks_AllGenes <- dfCanonicalPairs_H88M67_Ranks %>%
filter(Data == "AllGenes")
dfCanonicalPairs_H88M67_Ranks_MLP <- dfCanonicalPairs_H88M67_Ranks %>%
filter(Data != "AllGenes") %>%
group_by(Seed) %>%
summarise(RankMean = mean(TargetRank),
RankSdLower = RankMean - 2*sd(TargetRank),
RankSdUpper = RankMean + 2*sd(TargetRank)) %>%
ungroup()
dfMouseColours <- annotation_colours_mod$MouseRegion %>%
enframe(name = "Region11",
value = "Colour") %>%
inner_join(dfLabelsMouse %>%
select(Region11, Region67) %>%
distinct(),
by = "Region11") %>%
semi_join(dfCanonicalPairs_H88M67,
by = c("Region67" = "Mouse")) %>%
mutate(Region67 = fct_rev(factor(Region67, levels = listLabelsMouseReordered$Region67_reordered))) %>%
arrange(Region67)
#Create rank distributions plot
fig4_distributions <- ggplot(dfCanonicalPairs_H88M67_Ranks_MLP,
aes(x = Seed)) +
geom_pointrange(mapping = aes(y = RankMean,
ymin = RankSdLower,
ymax = RankSdUpper),
# col = "grey70",
col = "#719DC0",
size = 0.25) +
geom_point(data = dfCanonicalPairs_H88M67_Ranks_AllGenes,
mapping = aes(y = TargetRank),
# col = "black",
col = "#B27700",
size = 1.5) +
coord_flip(ylim = c(0,35)) +
scale_y_continuous(breaks = c(1, seq(10, 40, by = 10)),
limits = c(0, 35),
expand = c(0,0)) +
labs(x = "Mouse region",
y = "Rank") +
theme_bw() +
theme(axis.text.y = element_text(colour = dfMouseColours$Colour,
face = "bold"),
plot.margin = margin(t = 0, r = 0, l = 0, b = 0, unit = 'inch'))
fig4_distributions_grob <- ggplotGrob(fig4_distributions) %>% grid.force()
fig4_distributions_panel_grob <- getGrob(fig4_distributions_grob, "panel.7-5-7-5")
fig4_distributions_ytext_grob <- getGrob(fig4_distributions_grob, "axis-l.7-4-7-4")
fig4_distributions_ytitle_grob <- getGrob(fig4_distributions_grob, "ylab-l.7-3-7-3")
fig4_distributions_xtext_grob <- getGrob(fig4_distributions_grob, "axis-b.8-5-8-5")
fig4_distributions_xtitle_grob <- getGrob(fig4_distributions_grob, "xlab-b.9-5-9-5")
#Create a separate plot to make the legend
fig4_distributions_legend <- ggplot(dfCanonicalPairs_H88M67_Ranks,
aes(x = TargetRank, y = Seed, col = Data2)) +
geom_point() +
scale_colour_manual(name = "Data",
# values = c("grey70", "black"),
values = c("#719DC0", "#B27700"),
labels = c("Gene expression latent space", "Gene expression initial space")) +
theme_bw() +
theme(legend.position = "bottom",
legend.direction = "vertical",
legend.title = element_blank())
#Extract the legend grob from the plot
fig4_distributions_legend_grob <- ggplotGrob(fig4_distributions_legend) %>%
grid.force() %>%
getGrob("guides.3-3-3-3")
#Create plot title
fig4_distributions_title_grob <- textGrob("Rank of canonical human homologue",
x = unit(1, 'npc'),
y = unit(0.3, 'npc'),
just = c("right", "bottom"))
#Generate a mouse tree with 67 leaf nodes
treeMouse_67 <- Clone(treeMouse)
pruneAnatTree(treeMouse_67,
nodes = listLabelsMouseReordered$Region67_reordered,
method = "BelowNode")
#Create a mouse atlas with 67 regions
atlasMouse_67 <- hanatToAtlas(treeMouse_67, mincArray(dsurqeLabels))
dfAtlasMouse_67 <- hanatToAtlasDefs(treeMouse_67)
#Compute the proportion of rank differences non-positive
dfCanonicalPairs_H88M67_RankDiffsProp <- dfCanonicalPairs_H88M67_RankDiffs %>%
mutate(NonPositive = ifelse(RankDiff <= 0, TRUE, FALSE)) %>%
group_by(Seed) %>%
summarise(PropNonPos = sum(NonPositive)/n()) %>%
ungroup()
#Create MINC array for proportions non-positive
fig4_ss_array <- mincBuildArray(values = dfCanonicalPairs_H88M67_RankDiffsProp$PropNonPos,
values.names = dfCanonicalPairs_H88M67_RankDiffsProp$Seed,
labels = atlasMouse_67,
defs = dfAtlasMouse_67)
#Generate base slice series
fig4_ss_grob <- sliceSeries(nrow = 8, ncol = 2, begin = 70, end = 330) %>%
anatomy(mincArray(dsurqeAnat), low = 700, high = 1400) %>%
overlay(mincArray(fig4_ss_array), low = 0, high = 1) %>%
legend("Proportion of non-positive rank differences") %>%
grobify()
treeMouse_11 <- Clone(treeMouse)
pruneAnatTree(treeMouse_11,
nodes = listLabelsMouseReordered$Region11_reordered,
method = "BelowNode")
atlasMouse_11 <- hanatToAtlas(treeMouse_11, mincArray(dsurqeLabels))
dfAtlasMouse_11 <- hanatToAtlasDefs(treeMouse_11)
dsurqeAnat_3d <- mincArray(dsurqeAnat)
dsurqeMask_3d <- mincArray(dsurqeMask)
dsurqeAnat_3d[dsurqeMask_3d == 0] <- NA
anatLow <-  700
anatHigh <- 1400
dsurqeAnat_3d[dsurqeAnat_3d >= anatHigh] <- anatHigh
dsurqeAnat_3d[dsurqeAnat_3d <= anatLow] <- anatLow
dims <- dim(dsurqeAnat_3d)
slice <- 100
sliceSelectionAnat <- dsurqeAnat_3d[1:dims[1], 1:dims[2], slice]
colnames(sliceSelectionAnat) <- 1:ncol(sliceSelectionAnat)
rownames(sliceSelectionAnat) <- nrow(sliceSelectionAnat):1
dfSliceSelectionAnat <- sliceSelectionAnat %>%
as_tibble(rownames = "x") %>%
pivot_longer(-x, names_to = "y", values_to = "Intensity") %>%
mutate_all(.funs = as.numeric)
atlasMouse_11_3d <- mincArray(atlasMouse_11)
atlasMouse_11_3d[dsurqeMask_3d == 0] <- NA
atlasMouse_11_3d[atlasMouse_11_3d == 0] <- NA
sliceSelectionLabels <- atlasMouse_11_3d[1:dims[1], 1:dims[2], slice]
colnames(sliceSelectionLabels) <- 1:ncol(sliceSelectionLabels)
rownames(sliceSelectionLabels) <- nrow(sliceSelectionLabels):1
dfSliceSelectionLabels <- sliceSelectionLabels %>%
as_tibble(rownames = "x") %>%
pivot_longer(-x, names_to = "y", values_to = "Label") %>%
mutate_all(.funs = as.numeric)
dfSliceSelection <- inner_join(dfSliceSelectionAnat,
dfSliceSelectionLabels,
by = c("x", "y"))
dfMouseColours <- treeMouse_11$Get("color_hex_triplet", filterFun = isLeaf) %>%
enframe(name = "Structure",
value = "Colour") %>%
inner_join(dfAtlasMouse_11,
by = "Structure") %>%
semi_join(dfSliceSelection,
by = "Label") %>%
arrange(Label)
dfSliceSelection <- dfSliceSelection %>%
filter(y <= 400) %>%
mutate(Label = factor(Label))
asp <- max(dfSliceSelection$x)/max(dfSliceSelection$y)
sliceAMBALegend <- ggplot(dfSliceSelection, aes(x = x, y = y)) +
geom_tile(aes(fill = Intensity),
alpha = 0.5) +
scale_fill_gradient(low = gray.colors(255)[1],
high = gray.colors(255)[255],
na.value = 'transparent',
guide = F) +
new_scale_fill() +
geom_tile(aes(fill = Label)) +
scale_fill_manual(na.value = 'transparent',
values = dfMouseColours$Colour,
guide = F) +
coord_fixed() +
theme_void() +
# theme_minimal() +
theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 0))
sliceAMBALegend_grob <- ggplotGrob(sliceAMBALegend) %>% grid.force()
sliceAMBALegend_panel_grob <- getGrob(sliceAMBALegend_grob, "panel.7-5-7-5")
rm(treeMouse_11,
atlasMouse_11,
dfAtlasMouse_11,
dsurqeAnat_3d,
dsurqeMask_3d,
slice,
sliceSelectionAnat,
atlasMouse_11_3d,
sliceSelectionLabels,
dfSliceSelectionAnat,
dfSliceSelectionLabels,
dfSliceSelection,
dfMouseColours)
#Generate figure 4 grob
#Old grob with tree distance proportions
# fig4_grob <- arrangeGrob(fig4_distributions_panel_grob, #1
#                          fig4_distributions_ytext_grob,#2
#                          fig4_distributions_ytitle_grob,#3
#                          fig4_distributions_xtext_grob,#4
#                          fig4_distributions_xtitle_grob,#5
#                          fig4_distributions_legend_grob, #6
#                          fig4_distributions_title_grob, #7
#                          fig4_treedist_panel_grob, #8
#                          fig4_treedist_xtext_grob, #9
#                          fig4_treedist_xtitle_grob, #10
#                          fig4_treedist_legend_grob, #11
#                          fig4_ss_grob, #12
#                          fig4_ss_title_grob, #13
#                          layout_matrix = rbind(c(NA, NA, 7, NA, NA, NA, 13),
#                                                c( 3,  2, 1, NA,  8, NA, 12),
#                                                c(NA, NA, 4, NA,  9, NA, NA),
#                                                c(NA, NA, 5, NA, 10, NA, NA),
#                                                c(NA, NA, 6, NA, NA, NA, NA),
#                                                c(NA, NA, 6, NA, 11, NA, NA)),
#                          widths = unit(c(0.60, 2.0, 2.2, 0.25, 2.2, 0.25, 2.5), 'inch'),
#                          heights = unit(c(0.5, 4.55, 0.175, 0.175, 0.1, 0.7), 'inch'))
#New grob for tree plot
fig4_grob <- arrangeGrob(fig4_distributions_panel_grob, #1
fig4_distributions_ytext_grob,#2
fig4_distributions_ytitle_grob,#3
fig4_distributions_xtext_grob,#4
fig4_distributions_xtitle_grob,#5
fig4_distributions_legend_grob, #6
fig4_distributions_title_grob, #7
fig4_ss_grob, #8
textGrob("Panel C\nTree proportions plot\nTree diagrams for two seeds\n(e.g. Declive and CA2)\nEdges and nodes coloured\nwith Allen colours\nSize of nodes = proportion\nof times that node is the\ntop match for the given seed\nacross latent spaces."), #10
layout_matrix = rbind(c(NA, NA, 7, NA, NA, NA, NA),
c( 3,  2, 1, NA,  8, NA, 10),
c(NA, NA, 4, NA, NA, NA, NA),
c(NA, NA, 5, NA, NA, NA, NA),
c(NA, NA, 6, NA, NA, NA, NA),
c(NA, NA, 6, NA, NA, NA, NA)),
widths = unit(c(0.60, 2.0, 2.2, 0.25, 2.5, 0.25, 2.2), 'inch'),
heights = unit(c(0.4, 4.55, 0.175, 0.175, 0.1, 0.6), 'inch'))
grid.newpage()
grid.draw(fig4_grob)
sliceAMBAWidth <- 0.9
sliceAMBAHeight <- sliceAMBAWidth/asp
vp = viewport(x = unit(2.1, 'inch'),
y = unit(0.55, 'inch'),
width = unit(sliceAMBAWidth, 'inch'),
height = unit(sliceAMBAHeight, 'inch'))
pushViewport(vp)
grid.draw(sliceAMBALegend_panel_grob)
popViewport()
grid.rect(gp = gpar(fill = NA))
grid.text(c("A.", "B."),
x = unit(c(0.2, 4.975), 'inch'),
y = unit(c(0.95, 0.95), 'npc'),
gp = gpar(fontsize = 14, fontface = "bold"))
treeHuman_88 <- Clone(treeHuman)
pruneAnatTree(treeHuman_88,
nodes = listLabelsHumanReordered$Region88_reordered,
method = "BelowNode")
dfCanonicalPairs_H88M67_TopMatch <- dfSimilarityProfiles %>%
inner_join(dfCanonicalPairs_H88M67,
by = c("Seed" = "Mouse")) %>%
filter(Data != "AllGenes",
TargetRank == 1) %>%
select(Data, Seed, HumanPair = Human, Target)
head(dfCanonicalPairs_H88M67_TopMatch)
dfCanonicalPairs_H88M67_TopMatch$Data %>% unique
dfSimilarityProfiles$Data %>% unique
nMLPsamples <- dfSimilarityProfiles %>%
filter(Data != "AllGenes") %>%
pull(Data) %>%
unique() %>%
length()
nMLPsamples
dfCanonicalPairs_H88M67_TopMatch_Summary <- dfCanonicalPairs_H88M67_TopMatch %>%
group_by(Seed, Target) %>%
summarise(Count = n(),
Prop = Count/nMLPsamples) %>%
ungroup()
dfCanonicalPairs_H88M67_TopMatch_Summary
dfSimilarityProfiles %>%
inner_join(dfCanonicalPairs_H88M67,
by = c("Seed" = "Mouse"))
dfSimilarityProfiles %>%
inner_join(dfCanonicalPairs_H88M67,
by = c("Seed" = "Mouse")) %>%
filter(Data != "AllGenes")
dfSimilarityProfiles %>%
inner_join(dfCanonicalPairs_H88M67,
by = c("Seed" = "Mouse")) %>%
filter(Data != "AllGenes") %>%
rename(HumanPair = Human)
temp <- dfSimilarityProfiles %>%
inner_join(dfCanonicalPairs_H88M67,
by = c("Seed" = "Mouse")) %>%
filter(Data != "AllGenes") %>%
rename(HumanPair = Human)
temp %>% group_by(Data, Seed) %>% count
dfCombinations <- expand_grid(Seed = unique(temp$Seed),
Target = unique(temp$Target))
dfCombinations
temp %>%
filter(TargetRank == 1)
temp %>%
filter(TargetRank == 1) %>%
select(Data, Seed, HumanPair, Target)
temp %>%
filter(TargetRank == 1) %>%
select(Data, Seed, HumanPair, Target) %>%
group_by(Seed, Target) %>%
summarise(Prop = n()/nMLPsamples)
temp %>%
filter(TargetRank == 1) %>%
select(Data, Seed, HumanPair, Target) %>%
group_by(Seed, Target) %>%
summarise(Prop = n()/nMLPsamples) %>%
ungroup() %>%
right_join(dfCombinations, by = c("Seed", "Target"))
temp %>%
filter(TargetRank == 1) %>%
select(Data, Seed, HumanPair, Target) %>%
group_by(Seed, Target) %>%
summarise(Prop = n()/nMLPsamples) %>%
ungroup() %>%
right_join(dfCombinations, by = c("Seed", "Target")) %>%
mutate(Prop = ifelse(is.na(Prop), 0, 1))
temp2 <- temp %>%
filter(TargetRank == 1) %>%
select(Data, Seed, HumanPair, Target) %>%
group_by(Seed, Target) %>%
summarise(Prop = n()/nMLPsamples) %>%
ungroup() %>%
right_join(dfCombinations, by = c("Seed", "Target")) %>%
mutate(Prop = ifelse(is.na(Prop), 0, 1))
temp2
temp2 %>% group_by(Seed) %>% summarise(sum(Prop))
temp2 <- temp %>%
filter(TargetRank == 1) %>%
select(Data, Seed, HumanPair, Target) %>%
group_by(Seed, Target) %>%
summarise(Prop = n()/nMLPsamples) %>%
ungroup() #%>%
temp2
temp2 %>% filter(Seed == "Anterior cingulate area")
temp2 %>% filter(Seed == "Anterior cingulate area") %>% pull(Prop) %>% sum
temp2 %>% group_by(Seed) %>% summarise(sum(Prop))
temp2$Seed %in% dfCombinations$Seed
dfCombinations$Seed %in% temp2$Seed
temp2 <- temp %>%
filter(TargetRank == 1) %>%
select(Data, Seed, HumanPair, Target) %>%
group_by(Seed, Target) %>%
summarise(Prop = n()/nMLPsamples) %>%
ungroup() %>%
right_join(dfCombinations, by = c("Seed", "Target")) %>%
mutate(Prop = ifelse(is.na(Prop), 0, Prop))
temp2 %>% group_by(Seed) %>% summarise(sum(Prop))
temp2 <- temp %>%
filter(TargetRank == 1) %>%
select(Data, Seed, HumanPair, Target) %>%
group_by(Seed, Target) %>%
summarise(Prop = n()/nMLPsamples) %>%
ungroup() %>%
right_join(dfCombinations, by = c("Seed", "Target")) %>%
mutate(Prop = ifelse(is.na(Prop), 0, Prop))
dfCanonicalPairs_H88M67_TopMatch_Summary <- temp %>%
filter(TargetRank == 1) %>%
select(Data, Seed, HumanPair, Target) %>%
group_by(Seed, Target) %>%
summarise(Prop = n()/nMLPsamples) %>%
ungroup() %>%
right_join(dfCombinations, by = c("Seed", "Target")) %>%
mutate(Prop = ifelse(is.na(Prop), 0, Prop))
rm(temp)
# seed <- "Declive (VI)"
seed <- "Field CA2"
dfCanonicalPairs_H88M67_TopMatch_Summary_Seed <- dfCanonicalPairs_H88M67_TopMatch_Summary %>%
filter(Seed == seed)
dim(dfCanonicalPairs_H88M67_TopMatch_Summary)
dim(dfCanonicalPairs_H88M67_TopMatch_Summary_Seed)
treeHuman_88_seedprop <- Clone(treeHuman_88)
treeHuman_88_seedprop$Do(function(node){
if(isLeaf(node)){
ind <- dfCanonicalPairs_H88M67_TopMatch_Summary_Seed$Target == node$name
node$prop <- dfCanonicalPairs_H88M67_TopMatch_Summary_Seed[ind,][["Prop"]]
}
})
print(treeHuman_88_seedprop, "prop")
treePlot <- Clone(treeHuman_88_seedprop)
treePlot <- FindNode(treePlot, "Basic cell groups and regions")
treePlot$Do(function(node){
if("Vermal regions" %in% node$path[-length(node$path)]){
node$name <- node$name %>% str_remove_all("\\(|\\)") %>% str_replace_all(" ", "_")
}
if(node$name == "Ammon's horn"){
node$name <- "Ammon horn"
}
})
treePlot$Do(function(node){
if("Vermal regions" %in% node$path[-length(node$path)]){
node$name <- node$name %>% str_remove_all("\\(|\\)") %>% str_replace_all(" ", "_")
}
if(node$name == "Ammon's horn"){
node$name <- "Ammon horn"
}
})
treePlot$Do(function(node){
if("Vermal regions" %in% node$path[-length(node$path)]){
node$name <- node$name %>% str_remove_all("\\(|\\)") %>% str_replace_all(" ", "_")
}
})
treePlot <- Clone(treeHuman_88_seedprop)
treePlot <- FindNode(treePlot, "Basic cell groups and regions")
treePlot
treePlot
treeHuman_88_seedprop <- Clone(treeHuman_88)
treeHuman_88_seedprop$Do(function(node){
if(isLeaf(node)){
ind <- dfCanonicalPairs_H88M67_TopMatch_Summary_Seed$Target == node$name
node$prop <- dfCanonicalPairs_H88M67_TopMatch_Summary_Seed[ind,][["Prop"]]
}
})
treeHuman_88_seedprop
treePlot <- Clone(treeHuman_88_seedprop)
treePlot
treePlot <- FindNode(treePlot, "Basic cell groups and regions")
treePlot
treePlot <- Clone(treeHuman_88_seedprop)
# treePlot <- FindNode(treePlot, "Basic cell groups and regions")
treePlot$Do(function(node){
if("Vermal regions" %in% node$path[-length(node$path)]){
node$name <- node$name %>% str_remove_all("\\(|\\)") %>% str_replace_all(" ", "_")
}
})
